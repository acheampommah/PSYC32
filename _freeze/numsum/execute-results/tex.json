{
  "hash": "6b8a9038572e4963dceb4c73f7381836",
  "result": {
    "markdown": "---\ntitle: \"Numerical Summaries\"\n---\n\n\n\n\n## Summarizing data in R 1/2\n- Have seen `summary` (5-number summary of each column). But what\nif we want:\n  - a summary or two of just one column\n  - a count of observations in each category of a categorical variable\n  - summaries by group\n  - a different summary of all columns (eg. SD)\n- To do this, meet pipe operator `%>%`. This takes input data frame,\ndoes something to it, and outputs result. (Learn: `Ctrl-Shift-M`.) \n\n## Summarizing data in R 2/2\n\n- Output from a pipe can be used as input to something else, so can\nhave a sequence of pipes.\n- Summaries include: `mean`, `median`, `min`, `max`, `sd`, `IQR`, `quantile` (for\nobtaining quartiles or any percentile), `n` (for counting observations).\n- Use our Australian athletes data again.\n\n## Packages for this section\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n## Summarizing one column\n- Mean height: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% summarize(m=mean(Ht))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 1\n      m\n  <dbl>\n1  180.\n```\n:::\n:::\n\n\n\nor to get mean and SD of BMI:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% summarize(m=mean(BMI),s=sd(BMI))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n      m     s\n  <dbl> <dbl>\n1  23.0  2.86\n```\n:::\n:::\n\n\n\n## Quartiles\n\n- `quantile` calculates percentiles (\"fractiles\"), so we want the 25th and 75th\npercentiles:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% summarize( Q1=quantile(Wt, 0.25),\n                        Q3=quantile(Wt, 0.75))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n     Q1    Q3\n  <dbl> <dbl>\n1  66.5  84.1\n```\n:::\n:::\n\n\n\n## Creating new columns\n\n- These weights are in kilograms. Maybe we want to summarize the\nweights in pounds.\n- Convert kg to lb by multiplying by 2.2.\n- Create new column and summarize that: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% mutate(wt_lb=Wt*2.2) %>%\n  summarize(Q1_lb=quantile(wt_lb, 0.25),\n            Q3_lb=quantile(wt_lb, 0.75))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n  Q1_lb Q3_lb\n  <dbl> <dbl>\n1  146.  185.\n```\n:::\n:::\n\n\n\n## Counting how many\nfor example, number of athletes in\neach sport: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% count(Sport)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 2\n   Sport       n\n   <chr>   <int>\n 1 BBall      25\n 2 Field      19\n 3 Gym         4\n 4 Netball    23\n 5 Row        37\n 6 Swim       22\n 7 T400m      29\n 8 TSprnt     15\n 9 Tennis     11\n10 WPolo      17\n```\n:::\n:::\n\n\n\n## Counting how many, variation 2:\n\nAnother way (which will make sense\nin a moment):\n\n\\small\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% group_by(Sport) %>%\n  summarize(count=n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 2\n   Sport   count\n   <chr>   <int>\n 1 BBall      25\n 2 Field      19\n 3 Gym         4\n 4 Netball    23\n 5 Row        37\n 6 Swim       22\n 7 T400m      29\n 8 TSprnt     15\n 9 Tennis     11\n10 WPolo      17\n```\n:::\n:::\n\n\n\\normalsize\n\n## Summaries by group\n- Might want separate summaries for each “group”, eg. mean and SD\nof height for males and females. Strategy is `group_by` (to define the\ngroups) and then `summarize`: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% group_by(Sex) %>% \n  summarize(mean_Ht = mean(Ht), sd_Ht = sd(Ht))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 3\n  Sex    mean_Ht sd_Ht\n  <chr>    <dbl> <dbl>\n1 female    175.  8.24\n2 male      186.  7.90\n```\n:::\n:::\n\n\n\n## Count plus stats\n\n- If you want number of observations per group plus some stats, you need to\ngo the `n()` way:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% group_by(Sex) %>%\nsummarize(n = n(), mean_Ht = mean(Ht), sd_Ht = sd(Ht))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 4\n  Sex        n mean_Ht sd_Ht\n  <chr>  <int>   <dbl> <dbl>\n1 female   100    175.  8.24\n2 male     102    186.  7.90\n```\n:::\n:::\n\n\n\n- This explains second variation on counting within group: “within each\nsport/Sex, how many athletes were there?”\n\n## Summarizing several columns\n\n- Standard deviation of each (numeric) column: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% summarize(across(where(is.numeric), \\(x) sd(x))) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 11\n    RCC   WCC    Hc    Hg  Ferr   BMI   SSF `%Bfat`   LBM    Ht    Wt\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl> <dbl> <dbl> <dbl>\n1 0.458  1.80  3.66  1.36  47.5  2.86  32.6    6.19  13.1  9.73  13.9\n```\n:::\n:::\n\n\n\n- Median and IQR of all columns whose name starts with H: \n\n\\small\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% summarize(across(starts_with(\"H\"),\n                       list(med = \\(x) median(x), \n                            iqr = \\(x) IQR(x))))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 6\n  Hc_med Hc_iqr Hg_med Hg_iqr Ht_med Ht_iqr\n   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1   43.5   4.98   14.7   2.07   180.   12.2\n```\n:::\n:::\n\n\n\\normalsize\n\n\n## Same thing by group\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% \n  group_by(Sex) %>% \n  summarize(across(starts_with(\"H\"), \n                   list(med = \\(h) median(h), \n                        iqr = \\(h) IQR(h))))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 7\n  Sex    Hc_med Hc_iqr Hg_med Hg_iqr Ht_med Ht_iqr\n  <chr>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 female   40.6   4.03   13.5  1.60    175    8.68\n2 male     45.5   2.57   15.5  0.975   186.  11.3 \n```\n:::\n:::\n",
    "supporting": [
      "numsum_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}