{
  "hash": "8ca12e10081daf7b72ec5603b8d764d8",
  "result": {
    "markdown": "---\ntitle: \"Reading data files\"\n---\n\n\n\n## Introduction\n\n- First thing we need to do is to read in data, so that we can use our\nsoftware to analyze.\n- Consider these:\n  - Spreadsheet data saved as `.csv` file.\n  - “Delimited” data such as values separated by spaces.\n  - Actual Excel spreadsheets.\n  \n## Packages for this section\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n## A spreadsheet\n\n![](spreadsheet.png)\n\n## Save as `.csv`\n\n- `.csv` or “comma-separated values” is a way of turning spreadsheet\nvalues into plain text.\n- Easy to read into R\n- but does not preserve formulas. (This is a reason for doing all your\ncalculations in your statistical software, and only having data in your\nspreadsheet.)\n- File, Save As Text CSV (or similar). \n- used name `test1.csv`.\n\n\n## The `.csv` file\n\n```\nid,x,y,group\np1,10,21,upper\np2,11,20,lower\np3,13,25,upper\np4,15,27,lower\np5,16,30,upper\np6,17,31,lower\n```\n\n\nTo read this in:\n\n- Fire up  R Studio at `r.datatools.utoronto.ca` \n- Upload this .csv file. (Bottom right, next to New Folder, Upload.)\nClick Choose File, find the file, click Open. Click OK. See the file\nappear bottom right.\n\n## Make a new Quarto document\n\n- File, New File, Quarto Document\n- ...and get rid of the template document (leaving the first four lines).\n- Make a code chunk and in it put this. Run it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Reading in the file\n\n- Use `read_csv` with the name of the file, in quotes. Save the read-in\nfile in something, here called `mydata`. Make a new code chunk for\nthis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- read_csv(\"test1.csv\")\nmydata\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"x\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"group\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"p1\",\"2\":\"10\",\"3\":\"21\",\"4\":\"upper\"},{\"1\":\"p2\",\"2\":\"11\",\"3\":\"20\",\"4\":\"lower\"},{\"1\":\"p3\",\"2\":\"13\",\"3\":\"25\",\"4\":\"upper\"},{\"1\":\"p4\",\"2\":\"15\",\"3\":\"27\",\"4\":\"lower\"},{\"1\":\"p5\",\"2\":\"16\",\"3\":\"30\",\"4\":\"upper\"},{\"1\":\"p6\",\"2\":\"17\",\"3\":\"31\",\"4\":\"lower\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## More on the above\n\n- read_csv guesses what kind of thing is in each column. Here it\ncorrectly guesses that:\n  - id and group are text (categorical variables). id is actually “identifier\nvariable”: identifies individuals.\n  - x and y are \"double\": numbers that might have a decimal point in them.\n\n## R Studio on your own computer\n\n- Put the .csv file in the same folder as your project. Then read it in\nas above like `read_csv(\"test1.csv\")`.\n- Or, use\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- file.choose()\nf\n```\n:::\n\n\nwhich brings up a file selector (as if you were going to find a file to\nload or save it). Find your `.csv` file, the address of which will be\nsaved in `f`, and then:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- read_csv(f)\n```\n:::\n\n\n- When you have selected the file, comment out the `file.choose` line\nby putting a # on the front of it. That will save you having to find\nthe file again by mistake. (Keyboard shortcut: go to the line, type\ncontrol-shift-C or Mac equivalent with Cmd.)\n\n## Looking at what we read in\n- Again, type the name of the thing to display it:\n\n\\scriptsize\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"x\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"group\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"p1\",\"2\":\"10\",\"3\":\"21\",\"4\":\"upper\"},{\"1\":\"p2\",\"2\":\"11\",\"3\":\"20\",\"4\":\"lower\"},{\"1\":\"p3\",\"2\":\"13\",\"3\":\"25\",\"4\":\"upper\"},{\"1\":\"p4\",\"2\":\"15\",\"3\":\"27\",\"4\":\"lower\"},{\"1\":\"p5\",\"2\":\"16\",\"3\":\"30\",\"4\":\"upper\"},{\"1\":\"p6\",\"2\":\"17\",\"3\":\"31\",\"4\":\"lower\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\\normalsize\n\n- This is a “tibble” or data frame, the standard way of storing a data\nset in R.\n- Tibbles print as much as will display on the screen. If there are more\nrows or columns, it will say so.\n- You will see navigation keys to display more rows or columns (if there are more).\n\n## `View`-ing your data frame\n\n- Another way to examine your data frame is to View it, like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(mydata)\n```\n:::\n\n\n...or find your data frame in the Global Environment top right and\nclick it.\n- This pops up a “data frame viewer” top left:\n\n![](viewview.png){height=500px}\n\n## This View\n\n- Read-only: cannot edit data\n- Can display data satisfying conditions: click on Filter, then:\n  - for a categorical variable, type name of category you want\n  - for a quantitative variable, use slider to describe values you want.\n- Can sort a column into ascending or descending order (click little\narrows next to column name).\n- Clicking the symbol with arrow on it left of Filter “pops out” View\ninto separate (bigger) window.\n\n## Summarizing what we read in\n\n- It is always a good idea to look at your data after you have read it in,\nto make sure you have believable numbers (and the right number of\nindividuals and variables).\n- Quick check for errors: these often show up as values too high or too\nlow, so the min and/or max will be unreasonable.\n- Five-number summary:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mydata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      id                  x               y            group          \n Length:6           Min.   :10.00   Min.   :20.00   Length:6          \n Class :character   1st Qu.:11.50   1st Qu.:22.00   Class :character  \n Mode  :character   Median :14.00   Median :26.00   Mode  :character  \n                    Mean   :13.67   Mean   :25.67                     \n                    3rd Qu.:15.75   3rd Qu.:29.25                     \n                    Max.   :17.00   Max.   :31.00                     \n```\n:::\n:::\n\n\n- Quantitative, five-number summary plus mean.\n- Categorical, how many rows.\n\n## Reading from a URL\n- Any data file on the Web can be read directly.\n- [Example data link:](http://ritsokiguess.site/datafiles/global.csv)\n- Use URL instead of filename.\n- I like to save the URL in a variable first (because URLs tend to be\nlong), and then put that variable in the `read_` function:\n\n\\small\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- url(\"http://ritsokiguess.site/datafiles/global.csv\")\nglobal <- read_csv(my_url)\n```\n:::\n\n\\normalsize\n\n## The data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"warehouse\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"size\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"cost\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"A\",\"2\":\"225\",\"3\":\"11.95\"},{\"1\":\"B\",\"2\":\"350\",\"3\":\"14.13\"},{\"1\":\"A\",\"2\":\"150\",\"3\":\"8.93\"},{\"1\":\"A\",\"2\":\"200\",\"3\":\"10.98\"},{\"1\":\"A\",\"2\":\"175\",\"3\":\"10.03\"},{\"1\":\"A\",\"2\":\"180\",\"3\":\"10.13\"},{\"1\":\"B\",\"2\":\"325\",\"3\":\"13.75\"},{\"1\":\"B\",\"2\":\"290\",\"3\":\"13.30\"},{\"1\":\"B\",\"2\":\"400\",\"3\":\"15.00\"},{\"1\":\"A\",\"2\":\"125\",\"3\":\"7.97\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## Space-delimited files\n\n- Another common format for data is a text file with the values\nseparated by spaces. Top of some other data:\n\n```\ncup tempdiff      \t    \nStarbucks 13   \t  \t    \nStarbucks 7    \t   \nStarbucks 7    \t   \nStarbucks 17.5 \t   \nStarbucks 10   \t   \nStarbucks 15.5 \t   \nStarbucks 6    \t   \nStarbucks 6    \t   \nSIGG 12\t       \t   \nSIGG 16\t       \t   \nSIGG 9\t       \t   \nSIGG 23\t       \t   \nSIGG 11\t       \t   \nSIGG 20.5      \t   \nSIGG 12.5      \nSIGG 20.5      \nSIGG 24.5      \nCUPPS 6    \nCUPPS 6    \nCUPPS 18.5 \nCUPPS 10   \n```\n\n\n## Reading the coffee data\n\n- This file was on my computer so I uploaded it to `r.datatools.utoronto.ca`\nfirst.\n- This time, `read_delim`, and we also have to say what the thing is\nseparating the values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoffee <- read_delim(\"coffee.txt\", \" \")\ncoffee\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"cup\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"tempdiff\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Starbucks\",\"2\":\"13.0\"},{\"1\":\"Starbucks\",\"2\":\"7.0\"},{\"1\":\"Starbucks\",\"2\":\"7.0\"},{\"1\":\"Starbucks\",\"2\":\"17.5\"},{\"1\":\"Starbucks\",\"2\":\"10.0\"},{\"1\":\"Starbucks\",\"2\":\"15.5\"},{\"1\":\"Starbucks\",\"2\":\"6.0\"},{\"1\":\"Starbucks\",\"2\":\"6.0\"},{\"1\":\"SIGG\",\"2\":\"12.0\"},{\"1\":\"SIGG\",\"2\":\"16.0\"},{\"1\":\"SIGG\",\"2\":\"9.0\"},{\"1\":\"SIGG\",\"2\":\"23.0\"},{\"1\":\"SIGG\",\"2\":\"11.0\"},{\"1\":\"SIGG\",\"2\":\"20.5\"},{\"1\":\"SIGG\",\"2\":\"12.5\"},{\"1\":\"SIGG\",\"2\":\"20.5\"},{\"1\":\"SIGG\",\"2\":\"24.5\"},{\"1\":\"CUPPS\",\"2\":\"6.0\"},{\"1\":\"CUPPS\",\"2\":\"6.0\"},{\"1\":\"CUPPS\",\"2\":\"18.5\"},{\"1\":\"CUPPS\",\"2\":\"10.0\"},{\"1\":\"CUPPS\",\"2\":\"17.5\"},{\"1\":\"CUPPS\",\"2\":\"11.0\"},{\"1\":\"CUPPS\",\"2\":\"6.5\"},{\"1\":\"Nissan\",\"2\":\"2.0\"},{\"1\":\"Nissan\",\"2\":\"1.5\"},{\"1\":\"Nissan\",\"2\":\"2.0\"},{\"1\":\"Nissan\",\"2\":\"3.0\"},{\"1\":\"Nissan\",\"2\":\"0.0\"},{\"1\":\"Nissan\",\"2\":\"7.0\"},{\"1\":\"Nissan\",\"2\":\"0.5\"},{\"1\":\"Nissan\",\"2\":\"6.0\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n- Name of the cup, text, and tempdiff, a decimal number.\n\n## Looking at the values (some)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoffee\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"cup\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"tempdiff\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Starbucks\",\"2\":\"13.0\"},{\"1\":\"Starbucks\",\"2\":\"7.0\"},{\"1\":\"Starbucks\",\"2\":\"7.0\"},{\"1\":\"Starbucks\",\"2\":\"17.5\"},{\"1\":\"Starbucks\",\"2\":\"10.0\"},{\"1\":\"Starbucks\",\"2\":\"15.5\"},{\"1\":\"Starbucks\",\"2\":\"6.0\"},{\"1\":\"Starbucks\",\"2\":\"6.0\"},{\"1\":\"SIGG\",\"2\":\"12.0\"},{\"1\":\"SIGG\",\"2\":\"16.0\"},{\"1\":\"SIGG\",\"2\":\"9.0\"},{\"1\":\"SIGG\",\"2\":\"23.0\"},{\"1\":\"SIGG\",\"2\":\"11.0\"},{\"1\":\"SIGG\",\"2\":\"20.5\"},{\"1\":\"SIGG\",\"2\":\"12.5\"},{\"1\":\"SIGG\",\"2\":\"20.5\"},{\"1\":\"SIGG\",\"2\":\"24.5\"},{\"1\":\"CUPPS\",\"2\":\"6.0\"},{\"1\":\"CUPPS\",\"2\":\"6.0\"},{\"1\":\"CUPPS\",\"2\":\"18.5\"},{\"1\":\"CUPPS\",\"2\":\"10.0\"},{\"1\":\"CUPPS\",\"2\":\"17.5\"},{\"1\":\"CUPPS\",\"2\":\"11.0\"},{\"1\":\"CUPPS\",\"2\":\"6.5\"},{\"1\":\"Nissan\",\"2\":\"2.0\"},{\"1\":\"Nissan\",\"2\":\"1.5\"},{\"1\":\"Nissan\",\"2\":\"2.0\"},{\"1\":\"Nissan\",\"2\":\"3.0\"},{\"1\":\"Nissan\",\"2\":\"0.0\"},{\"1\":\"Nissan\",\"2\":\"7.0\"},{\"1\":\"Nissan\",\"2\":\"0.5\"},{\"1\":\"Nissan\",\"2\":\"6.0\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nThese were four brands of travel mug (in cup), and for each, how much\nthe temperature of the coffee in the mug decreased over 30 minutes.\n\n## Reading from the Web; the soap data\n- Use the URL in place of the filename.\n- Save the URL in a variable first:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- url(\"http://ritsokiguess.site/datafiles/soap.txt\")\nsoap <- read_delim(url, \" \")\n```\n:::\n\n\n## The soap data (some)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsoap\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"case\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"scrap\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"speed\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"line\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"218\",\"3\":\"100\",\"4\":\"a\"},{\"1\":\"2\",\"2\":\"248\",\"3\":\"125\",\"4\":\"a\"},{\"1\":\"3\",\"2\":\"360\",\"3\":\"220\",\"4\":\"a\"},{\"1\":\"4\",\"2\":\"351\",\"3\":\"205\",\"4\":\"a\"},{\"1\":\"5\",\"2\":\"470\",\"3\":\"300\",\"4\":\"a\"},{\"1\":\"6\",\"2\":\"394\",\"3\":\"255\",\"4\":\"a\"},{\"1\":\"7\",\"2\":\"332\",\"3\":\"225\",\"4\":\"a\"},{\"1\":\"8\",\"2\":\"321\",\"3\":\"175\",\"4\":\"a\"},{\"1\":\"9\",\"2\":\"410\",\"3\":\"270\",\"4\":\"a\"},{\"1\":\"10\",\"2\":\"260\",\"3\":\"170\",\"4\":\"a\"},{\"1\":\"11\",\"2\":\"241\",\"3\":\"155\",\"4\":\"a\"},{\"1\":\"12\",\"2\":\"331\",\"3\":\"190\",\"4\":\"a\"},{\"1\":\"13\",\"2\":\"275\",\"3\":\"140\",\"4\":\"a\"},{\"1\":\"14\",\"2\":\"425\",\"3\":\"290\",\"4\":\"a\"},{\"1\":\"15\",\"2\":\"367\",\"3\":\"265\",\"4\":\"a\"},{\"1\":\"16\",\"2\":\"140\",\"3\":\"105\",\"4\":\"b\"},{\"1\":\"17\",\"2\":\"277\",\"3\":\"215\",\"4\":\"b\"},{\"1\":\"18\",\"2\":\"384\",\"3\":\"270\",\"4\":\"b\"},{\"1\":\"19\",\"2\":\"341\",\"3\":\"255\",\"4\":\"b\"},{\"1\":\"20\",\"2\":\"215\",\"3\":\"175\",\"4\":\"b\"},{\"1\":\"21\",\"2\":\"180\",\"3\":\"135\",\"4\":\"b\"},{\"1\":\"22\",\"2\":\"260\",\"3\":\"200\",\"4\":\"b\"},{\"1\":\"23\",\"2\":\"361\",\"3\":\"275\",\"4\":\"b\"},{\"1\":\"24\",\"2\":\"252\",\"3\":\"155\",\"4\":\"b\"},{\"1\":\"25\",\"2\":\"422\",\"3\":\"320\",\"4\":\"b\"},{\"1\":\"26\",\"2\":\"273\",\"3\":\"190\",\"4\":\"b\"},{\"1\":\"27\",\"2\":\"410\",\"3\":\"295\",\"4\":\"b\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## Data aligned in columns\n- Sometimes you see data aligned in columns, thus:\n\n![](Screenshot_2019-04-24_20-16-24.png){height=400px}\n\n- `read_delim` will not work: values separated by more than one space.\n- The number of spaces between values is not constant, because there\nis one fewer space before the 10.\n- `read_table` works for this.\n\n## Reading in column-aligned data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugs <- read_table(\"migraine.txt\")\ndrugs\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"DrugA\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"DrugB\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"DrugC\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"4\",\"2\":\"6\",\"3\":\"6\"},{\"1\":\"5\",\"2\":\"8\",\"3\":\"7\"},{\"1\":\"4\",\"2\":\"4\",\"3\":\"6\"},{\"1\":\"3\",\"2\":\"5\",\"3\":\"6\"},{\"1\":\"2\",\"2\":\"4\",\"3\":\"7\"},{\"1\":\"4\",\"2\":\"6\",\"3\":\"5\"},{\"1\":\"3\",\"2\":\"5\",\"3\":\"6\"},{\"1\":\"4\",\"2\":\"10\",\"3\":\"5\"},{\"1\":\"4\",\"2\":\"6\",\"3\":\"5\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n## Reading an Excel sheet directly\n\n- Here is [my spreadsheet](test2.xlsx) from before, but tarted up a bit:\n\n![](excel.png){height=450px}\n\n- It is now a workbook with a second sheet called “notes” (that we\ndon’t want).\n- Install package `readxl` first.\n\n## Reading it in\n\n- Read into R, saying that we only want the sheet “data”. Upload\nspreadsheet first.\n- Excel spreadsheets must be “local”:\ncannot read one in from a URL.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nmydata2 <- read_excel(\"test2.xlsx\", sheet = \"data\")\nmydata2\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"x\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"group\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"p1\",\"2\":\"10\",\"3\":\"21\",\"4\":\"upper\"},{\"1\":\"p2\",\"2\":\"11\",\"3\":\"20\",\"4\":\"lower\"},{\"1\":\"p3\",\"2\":\"13\",\"3\":\"25\",\"4\":\"upper\"},{\"1\":\"p4\",\"2\":\"15\",\"3\":\"27\",\"4\":\"lower\"},{\"1\":\"p5\",\"2\":\"16\",\"3\":\"30\",\"4\":\"upper\"},{\"1\":\"p6\",\"2\":\"17\",\"3\":\"31\",\"4\":\"lower\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n",
    "supporting": [
      "readfile_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"readfile_files/libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"readfile_files/libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}