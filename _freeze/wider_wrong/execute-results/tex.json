{
  "hash": "34990131dc9a577df7f24ffd0dc55b1d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"When pivot-wider goes wrong\"\n---\n\n\n\n## Packages\n\nThe inevitable:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n## Some long data that should be wide\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 3\n    obs time      y\n  <dbl> <chr> <dbl>\n1     1 pre      19\n2     2 post     18\n3     3 pre      17\n4     4 post     16\n5     5 pre      15\n6     6 post     14\n```\n\n\n:::\n:::\n\n\n\n-   Six observations of variable `y`, but three measured before some\n    treatment and three measured after.\n-   Really matched pairs, so want column of `y`-values for `pre` and for\n    `post`.\n-   `pivot_wider`.\n\n## What happens here?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% pivot_wider(names_from = time, values_from = y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 3\n    obs   pre  post\n  <dbl> <dbl> <dbl>\n1     1    19    NA\n2     2    NA    18\n3     3    17    NA\n4     4    NA    16\n5     5    15    NA\n6     6    NA    14\n```\n\n\n:::\n:::\n\n\n\n-   Should be *three* `pre` values and *three* `post`. Why did this\n    happen?\n-   `pivot_wider` needs to know which *row* to put each observation in.\n-   Uses combo of columns *not* named in `pivot_wider`, here `obs`\n    (only).\n\n## The problem\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% pivot_wider(names_from = time, values_from = y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 3\n    obs   pre  post\n  <dbl> <dbl> <dbl>\n1     1    19    NA\n2     2    NA    18\n3     3    17    NA\n4     4    NA    16\n5     5    15    NA\n6     6    NA    14\n```\n\n\n:::\n:::\n\n\n\n-   There are 6 different `obs` values, so 6 different rows.\n-   No data for `obs` 2 and `pre`, so that cell missing (`NA`).\n-   Not enough data (6 obs) to fill 12 ($= 2 \\times 6$) cells.\n-   `obs` needs to say which subject provided which *2* observations.\n\n## Fixing it up\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 3\n  subject time      y\n    <dbl> <chr> <dbl>\n1       1 pre      19\n2       1 post     18\n3       2 pre      17\n4       2 post     16\n5       3 pre      15\n6       3 post     14\n```\n\n\n:::\n:::\n\n\n\n-   column `subject` shows which subject provided each `pre` and `post`.\n-   when we do `pivot_wider`, now only *3* rows, one per subject.\n\n## Coming out right\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd2 %>% pivot_wider(names_from = time, values_from = y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  subject   pre  post\n    <dbl> <dbl> <dbl>\n1       1    19    18\n2       2    17    16\n3       3    15    14\n```\n\n\n:::\n:::\n\n\n\n-   row each observation goes to determined by other column `subject`,\n    and now a `pre` and `post` for each `subject`.\n-   right layout for matched pairs $t$ or to make differences for sign\n    test or normal quantile plot.\n-   \"spaghetti plot\" needs data longer, as `d2`.\n\n## Spaghetti plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd2 %>% mutate(time = fct_inorder(time)) %>% \n  ggplot(aes(x = time, y = y, group = subject)) +\n    geom_point() + geom_line()\n```\n\n::: {.cell-output-display}\n![](wider_wrong_files/figure-beamer/wider-wrong-6-1.pdf)\n:::\n:::\n\n\n\n-   each subject's `y` decreases over time, with subject 1 highest\n    overall.\n\n## Another example\n\n-   Two independent samples this time\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 2\n  group         y\n  <chr>     <dbl>\n1 control       8\n2 control      11\n3 control      13\n4 control      14\n5 treatment    12\n6 treatment    15\n7 treatment    16\n8 treatment    17\n```\n\n\n:::\n:::\n\n\n\n-   These should be arranged like this\n-   but what if we make them wider?\n\n## Wider\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd3 %>% pivot_wider(names_from = group, values_from = y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 x 2\n  control   treatment\n  <list>    <list>   \n1 <dbl [4]> <dbl [4]>\n```\n\n\n:::\n:::\n\n\n\n-   row determined by what not used for `pivot_wider`: nothing!\n-   everything smooshed into *one* row!\n-   this time, too *much* data for the layout.\n-   Four data values squeezed into each of the two cells:\n    \"list-columns\".\n\n## Get the data out\n\n-   To expand list-columns out into the data values they contain, can\n    use `unnest`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd3 %>% pivot_wider(names_from = group, values_from = y) %>% \n  unnest(c(control, treatment))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 2\n  control treatment\n    <dbl>     <dbl>\n1       8        12\n2      11        15\n3      13        16\n4      14        17\n```\n\n\n:::\n:::\n\n\n\n-   in this case, wrong layout, because data values not paired.\n\n## A proper use of list-columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd3 %>% nest_by(group) %>% \n  summarize(n = nrow(data), \n            mean_y = mean(data$y), \n            sd_y = sd(data$y))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 x 4\n# Groups:   group [2]\n  group         n mean_y  sd_y\n  <chr>     <int>  <dbl> <dbl>\n1 control       4   11.5  2.65\n2 treatment     4   15    2.16\n```\n\n\n:::\n:::\n\n\n\n-   another way to do `group_by` and `summarize` to find stats by group.\n-   run this one piece at a time to see what it does.\n",
    "supporting": [
      "wider_wrong_files/figure-beamer"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}