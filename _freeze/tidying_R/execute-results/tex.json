{
  "hash": "67ac833e25191b6bd2ee880766ccbf29",
  "result": {
    "markdown": "## Tidying data\n- Data rarely come to us as we want to use them.\n- Before we can do analysis, typically have organizing to do.\n- This is typical of ANOVA-type data, “wide format”:\n\n```\n     pig feed1 feed2 feed3 feed4\n       1  60.8  68.7  92.6  87.9\n       2  57.0  67.7  92.1  84.2\n       3  65.0  74.0  90.2  83.1\n       4  58.6  66.3  96.5  85.7\n       5  61.7  69.8  99.1  90.3\n```\n\n- 20 pigs randomly allocated to one of four feeds. At end of \nstudy, weight of each pig is recorded. \n- Are any differences in mean weights among the feeds?\n- Problem: want all weights in one column, with 2nd column\nlabelling which feed. Untidy!\n\n\n## Tidy and untidy data (Wickham) \n- Data set easier to deal with if:\n  - each observation is one row\n  - each variable is one column\n  - each type of observation unit is one table\n- Data arranged this way called “tidy”; otherwise called “untidy”.\n- For the pig data:\n  - response variable is weight, but scattered over 4\ncolumns, which are levels of a factor `feed`.\n  - Want all the weights in one column, with a second column `feed`\nsaying which feed that weight goes with.\n  - Then we can run `aov`.\n  \n## Packages for this section\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\n```\n:::\n\n\n\n  \n## Reading in the pig data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/pigs1.txt\"\npigs1 <- read_delim(my_url, \" \")\npigs1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 5\n    pig feed1 feed2 feed3 feed4\n  <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1  60.8  68.7  92.6  87.9\n2     2  57    67.7  92.1  84.2\n3     3  65    74    90.2  83.1\n4     4  58.6  66.3  96.5  85.7\n5     5  61.7  69.8  99.1  90.3\n```\n:::\n:::\n\n\n\n## Gathering up the columns\n\n- This is a very common reorganization, and the magic “verb” is\n`pivot_longer`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npigs1 %>% pivot_longer(feed1:feed4, names_to=\"feed\", \n                       values_to=\"weight\") -> pigs2\n```\n:::\n\n\n\n- `pigs2` is now in “long” format, ready for analysis. See next page.\n- Anatomy of `pivot_longer`: \n    - columns to combine\n    - a name for column that will contain groups\n    - a name for column that will contain measurements\n\n## Long format pigs\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npigs2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 x 3\n     pig feed  weight\n   <dbl> <chr>  <dbl>\n 1     1 feed1   60.8\n 2     1 feed2   68.7\n 3     1 feed3   92.6\n 4     1 feed4   87.9\n 5     2 feed1   57  \n 6     2 feed2   67.7\n 7     2 feed3   92.1\n 8     2 feed4   84.2\n 9     3 feed1   65  \n10     3 feed2   74  \n11     3 feed3   90.2\n12     3 feed4   83.1\n13     4 feed1   58.6\n14     4 feed2   66.3\n15     4 feed3   96.5\n16     4 feed4   85.7\n17     5 feed1   61.7\n18     5 feed2   69.8\n19     5 feed3   99.1\n20     5 feed4   90.3\n```\n:::\n:::\n\n\n\n## Identifying the pigs\n\n- Values in `pig` identify pigs *within each group*: pig 1 is four different pigs!\n- Create unique pig IDs by gluing pig number onto feed:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npigs2 %>% mutate(pig_id=str_c(feed, \"_\", pig)) -> pigs2\npigs2 %>% slice_sample(n=7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 x 4\n    pig feed  weight pig_id \n  <dbl> <chr>  <dbl> <chr>  \n1     3 feed1   65   feed1_3\n2     3 feed4   83.1 feed4_3\n3     3 feed3   90.2 feed3_3\n4     1 feed2   68.7 feed2_1\n5     4 feed1   58.6 feed1_4\n6     5 feed3   99.1 feed3_5\n7     5 feed4   90.3 feed4_5\n```\n:::\n:::\n\n\n\n\n## ...and finally, the analysis\n- which is just what we saw before:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight.1 <- aov(weight ~ feed, data = pigs2)\nsummary(weight.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Df Sum Sq Mean Sq F value   Pr(>F)    \nfeed         3   3521  1173.5   119.1 3.72e-11 ***\nResiduals   16    158     9.8                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n\n- The mean weights of pigs on the different feeds are definitely not all\nequal.\n- So we run Tukey to see which ones differ (over).\n\n## Tukey\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTukeyHSD(weight.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = weight ~ feed, data = pigs2)\n\n$feed\n             diff        lwr       upr     p adj\nfeed2-feed1  8.68   3.001038 14.358962 0.0024000\nfeed3-feed1 33.48  27.801038 39.158962 0.0000000\nfeed4-feed1 25.62  19.941038 31.298962 0.0000000\nfeed3-feed2 24.80  19.121038 30.478962 0.0000000\nfeed4-feed2 16.94  11.261038 22.618962 0.0000013\nfeed4-feed3 -7.86 -13.538962 -2.181038 0.0055599\n```\n:::\n:::\n\n\n\nAll of the feeds differ! \n\n## Mean weights by feed \n\nTo find the best and worst, get mean weight by \nfeed group. I borrowed an idea from earlier to put the means in descending order:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npigs2 %>%\n  group_by(feed) %>%\n  summarize(mean_weight = mean(weight))%>%\n  arrange(desc(mean_weight))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 2\n  feed  mean_weight\n  <chr>       <dbl>\n1 feed3        94.1\n2 feed4        86.2\n3 feed2        69.3\n4 feed1        60.6\n```\n:::\n:::\n\n\n\nFeed 3 is best, feed 1 worst.\n\n## Should we have any concerns about the ANOVA?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pigs2, aes(x = feed, y = weight)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](tidying_R_files/figure-beamer/pigfeedplot-1.pdf)\n:::\n:::\n\n\n\n## Comments\n\n- Feed 2 has an outlier\n- But there are only 5 pigs in each group\n- The\nconclusion is so clear that I am OK with this.\n\n\n## Tuberculosis\n\n- The World Health Organization keeps track of number of cases of\nvarious diseases, eg. tuberculosis.\n- Some data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/tb.csv\"\ntb <- read_csv(my_url)\n```\n:::\n\n\n\n\n## The data (messed up)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,769 x 22\n   iso2   year   m04  m514  m014 m1524 m2534 m3544 m4554 m5564   m65    mu   f04\n   <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 AD     1989    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n 2 AD     1990    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n 3 AD     1991    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n 4 AD     1992    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n 5 AD     1993    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n 6 AD     1994    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n 7 AD     1996    NA    NA     0     0     0     4     1     0     0    NA    NA\n 8 AD     1997    NA    NA     0     0     1     2     2     1     6    NA    NA\n 9 AD     1998    NA    NA     0     0     0     1     0     0     0    NA    NA\n10 AD     1999    NA    NA     0     0     0     1     1     0     0    NA    NA\n# i 5,759 more rows\n# i 9 more variables: f514 <dbl>, f014 <dbl>, f1524 <dbl>, f2534 <dbl>,\n#   f3544 <dbl>, f4554 <dbl>, f5564 <dbl>, f65 <dbl>, fu <dbl>\n```\n:::\n:::\n\n\n\n\n## What we have\n\n- Variables:  country (abbreviated), year. Then number of\ncases for each gender and age group, eg. `m1524` is males aged 15–24.\nAlso `mu` and `fu`, where age is unknown.\n- Lots of missings. Want to get rid of.\n- Abbreviations [here](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb %>% \n  pivot_longer(m04:fu, names_to = \"genage\", \n               values_to = \"freq\", values_drop_na = TRUE) -> tb2\n```\n:::\n\n\n\n- columns to make longer\n- column to contain the names\n- column to contain the values\n- (optional) drop missings in the values\n\n## Results (some)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 35,750 x 4\n   iso2   year genage  freq\n   <chr> <dbl> <chr>  <dbl>\n 1 AD     1996 m014       0\n 2 AD     1996 m1524      0\n 3 AD     1996 m2534      0\n 4 AD     1996 m3544      4\n 5 AD     1996 m4554      1\n 6 AD     1996 m5564      0\n 7 AD     1996 m65        0\n 8 AD     1996 f014       0\n 9 AD     1996 f1524      1\n10 AD     1996 f2534      1\n# i 35,740 more rows\n```\n:::\n:::\n\n\n\n## Separating\n- 4 columns, but 5 variables, since `genage` contains both gender and\nage group. Split that up using separate.\n- `separate` needs 3 things:\n  - what to separate (no quotes needed),\n  - what to separate into (here you do need quotes),\n  - how to split.\n- For “how to split”, here “after first character”:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb2 %>% separate(genage, c(\"gender\", \"age\"), 1) -> tb3\n```\n:::\n\n\n\n## Tidied tuberculosis data (some)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 35,750 x 5\n   iso2   year gender age    freq\n   <chr> <dbl> <chr>  <chr> <dbl>\n 1 AD     1996 m      014       0\n 2 AD     1996 m      1524      0\n 3 AD     1996 m      2534      0\n 4 AD     1996 m      3544      4\n 5 AD     1996 m      4554      1\n 6 AD     1996 m      5564      0\n 7 AD     1996 m      65        0\n 8 AD     1996 f      014       0\n 9 AD     1996 f      1524      1\n10 AD     1996 f      2534      1\n# i 35,740 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n## In practice...\n\n- instead of doing the pipe one step at a time, you *debug* it one step at\na time, and when you have each step working, you use that step’s\noutput as input to the next step, thus:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb %>%\n  pivot_longer(m04:fu, names_to = \"genage\", \n               values_to = \"freq\", values_drop_na = T) %>% \n  separate(genage, c(\"gender\", \"age\"), 1) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 35,750 x 5\n   iso2   year gender age    freq\n   <chr> <dbl> <chr>  <chr> <dbl>\n 1 AD     1996 m      014       0\n 2 AD     1996 m      1524      0\n 3 AD     1996 m      2534      0\n 4 AD     1996 m      3544      4\n 5 AD     1996 m      4554      1\n 6 AD     1996 m      5564      0\n 7 AD     1996 m      65        0\n 8 AD     1996 f      014       0\n 9 AD     1996 f      1524      1\n10 AD     1996 f      2534      1\n# i 35,740 more rows\n```\n:::\n:::\n\n\n\n- You can split the R code over as many lines as you like, as long as\neach line is incomplete, so that R knows more is to come.\n- I like to put the pipe symbol on the end of the line.\n\n## Total tuberculosis cases by year (some of the years)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb3 %>%\n  filter(between(year, 1991, 1998)) %>% \n  group_by(year) %>% summarize(total=sum(freq))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 x 2\n   year  total\n  <dbl>  <dbl>\n1  1991    544\n2  1992    512\n3  1993    492\n4  1994    750\n5  1995 513971\n6  1996 635705\n7  1997 733204\n8  1998 840389\n```\n:::\n:::\n\n\n\n- Something very interesting happened between 1994 and 1995.\n\n## To find out what\n\n- try counting up total cases by country:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb3 %>% group_by(iso2) %>% \n  summarize(total=sum(freq)) %>% \n  arrange(desc(total))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 213 x 2\n   iso2    total\n   <chr>   <dbl>\n 1 CN    4065174\n 2 IN    3966169\n 3 ID    1129015\n 4 ZA     900349\n 5 BD     758008\n 6 VN     709695\n 7 CD     603095\n 8 PH     490040\n 9 BR     440609\n10 KE     431523\n# i 203 more rows\n```\n:::\n:::\n\n\n\n## what years do I have for China?\n\nChina started recording in 1995, which is at least part of the problem:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb3 %>% filter(iso2==\"CN\") %>% \n  group_by(year) %>% \n  summarize(total=sum(freq))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 x 2\n    year  total\n   <dbl>  <dbl>\n 1  1995 131194\n 2  1996 168270\n 3  1997 195895\n 4  1998 214404\n 5  1999 212258\n 6  2000 213766\n 7  2001 212766\n 8  2002 194972\n 9  2003 267280\n10  2004 384886\n11  2005 472719\n12  2006 468291\n13  2007 465877\n14  2008 462596\n```\n:::\n:::\n\n\n\n## first year of recording for each country?\n\n- A lot of countries started recording in about 1995, in fact:\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\\small\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb3 %>% group_by(iso2) %>% \n  summarize(first_year=min(year)) %>% \n  count(first_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 x 2\n   first_year     n\n        <dbl> <int>\n 1       1980     2\n 2       1994     2\n 3       1995   130\n 4       1996    31\n 5       1997    17\n 6       1998     6\n 7       1999    10\n 8       2000     4\n 9       2001     1\n10       2002     3\n11       2003     2\n12       2004     2\n13       2005     2\n14       2007     1\n```\n:::\n:::\n\n\n\n\\normalsize\n\n## Some Toronto weather data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \n  \"http://ritsokiguess.site/STAC32/toronto_weather.csv\"\nweather <- read_csv(my_url)\n```\n:::\n\n\n\n## The data (some, messed up)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24 x 35\n   station    Year Month element   d01   d02   d03   d04   d05   d06   d07   d08\n   <chr>     <dbl> <chr> <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 TORONTO ~  2018 01    tmax     -7.9  -7.1  -5.3  -7.7 -14.7 -15.4  -1     3  \n 2 TORONTO ~  2018 01    tmin    -18.6 -12.5 -11.2 -19.7 -20.6 -22.3 -17.5  -1.7\n 3 TORONTO ~  2018 02    tmax      5.6  -8.6   0.4   1.8  -6.6  -3.2  -4.1  -5.2\n 4 TORONTO ~  2018 02    tmin     -8.9 -15    -9.7  -8.8 -12    -8.2  -8.7  -9.7\n 5 TORONTO ~  2018 03    tmax     NA    NA    NA    NA    NA    NA     3.1   0.5\n 6 TORONTO ~  2018 03    tmin     NA    -0.5  NA    -3.1  NA    -1.4   0.4  -2.5\n 7 TORONTO ~  2018 04    tmax      4.5   6.5   5     5.7   2.9   5.4   2     2.7\n 8 TORONTO ~  2018 04    tmin     -2.6  -1.2   2.4  -3.2  -3.9  -2.6  -4.4  -3.6\n 9 TORONTO ~  2018 05    tmax     23.5  26.3  23    24    24.1  17.4  15.9  18.2\n10 TORONTO ~  2018 05    tmin      8.5  14.4  11.4   9.2   8.5  13.3  10.6   8.5\n# i 14 more rows\n# i 23 more variables: d09 <dbl>, d10 <dbl>, d11 <dbl>, d12 <dbl>, d13 <dbl>,\n#   d14 <dbl>, d15 <dbl>, d16 <dbl>, d17 <dbl>, d18 <dbl>, d19 <dbl>,\n#   d20 <dbl>, d21 <dbl>, d22 <dbl>, d23 <dbl>, d24 <dbl>, d25 <dbl>,\n#   d26 <dbl>, d27 <dbl>, d28 <dbl>, d29 <dbl>, d30 <dbl>, d31 <dbl>\n```\n:::\n:::\n\n\n\n## The columns\n\n- Daily weather records for \"Toronto City\" weather station in 2018:\n\n  - *station*: identifier for this weather station (always same here)\n  - *Year*, *Month*\n  - *element*: whether temperature given was daily max or daily min\n  - *d01, d02*,... *d31*: day of the month from 1st to 31st.\n\n- Numbers in data frame all temperatures (for different days of the month),\nso first step is\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather %>% \n  pivot_longer(d01:d31, names_to=\"day\", \n               values_to=\"temperature\", \n               values_drop_na = T) -> d\n```\n:::\n\n\n\n## So far\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 703 x 6\n   station       Year Month element day   temperature\n   <chr>        <dbl> <chr> <chr>   <chr>       <dbl>\n 1 TORONTO CITY  2018 01    tmax    d01          -7.9\n 2 TORONTO CITY  2018 01    tmax    d02          -7.1\n 3 TORONTO CITY  2018 01    tmax    d03          -5.3\n 4 TORONTO CITY  2018 01    tmax    d04          -7.7\n 5 TORONTO CITY  2018 01    tmax    d05         -14.7\n 6 TORONTO CITY  2018 01    tmax    d06         -15.4\n 7 TORONTO CITY  2018 01    tmax    d07          -1  \n 8 TORONTO CITY  2018 01    tmax    d08           3  \n 9 TORONTO CITY  2018 01    tmax    d09           1.6\n10 TORONTO CITY  2018 01    tmax    d10           5.9\n# i 693 more rows\n```\n:::\n:::\n\n\n\n## The days\n- Column `element` contains names of two different variables, that\nshould each be in separate column.\n- Distinct from eg. `m1524` in tuberculosis data, that contained levels of\ntwo different factors, handled by separate.\n- Untangling names of variables handled by `pivot_wider`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather %>%\n  pivot_longer(d01:d31, names_to=\"day\", \n               values_to=\"temperature\", \n               values_drop_na = T) %>% \n  pivot_wider(names_from=element, \n                values_from=temperature) -> d\n```\n:::\n\n\n\n## So far\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 355 x 6\n   station       Year Month day    tmax  tmin\n   <chr>        <dbl> <chr> <chr> <dbl> <dbl>\n 1 TORONTO CITY  2018 01    d01    -7.9 -18.6\n 2 TORONTO CITY  2018 01    d02    -7.1 -12.5\n 3 TORONTO CITY  2018 01    d03    -5.3 -11.2\n 4 TORONTO CITY  2018 01    d04    -7.7 -19.7\n 5 TORONTO CITY  2018 01    d05   -14.7 -20.6\n 6 TORONTO CITY  2018 01    d06   -15.4 -22.3\n 7 TORONTO CITY  2018 01    d07    -1   -17.5\n 8 TORONTO CITY  2018 01    d08     3    -1.7\n 9 TORONTO CITY  2018 01    d09     1.6  -0.6\n10 TORONTO CITY  2018 01    d10     5.9  -1.3\n# i 345 more rows\n```\n:::\n:::\n\n\n\n## Further improvements\n- We have tidy data now, but can improve things further.\n- `mutate` creates new columns from old (or assign back to change a\nvariable).\n- Would like numerical dates. `separate` works, or pull out number as\nbelow.\n- `select` keeps columns (or drops, with minus). Station name has no\nvalue to us:\n\n\\small\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather %>%\n  pivot_longer(d01:d31, names_to=\"day\", \n               values_to=\"temperature\", values_drop_na = T) %>% \n  pivot_wider(names_from=element, values_from=temperature) %>% \n  mutate(Day = parse_number(day)) %>%\n  select(-station) -> d\n```\n:::\n\n\n\\normalsize\n## So far\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 355 x 6\n    Year Month day    tmax  tmin   Day\n   <dbl> <chr> <chr> <dbl> <dbl> <dbl>\n 1  2018 01    d01    -7.9 -18.6     1\n 2  2018 01    d02    -7.1 -12.5     2\n 3  2018 01    d03    -5.3 -11.2     3\n 4  2018 01    d04    -7.7 -19.7     4\n 5  2018 01    d05   -14.7 -20.6     5\n 6  2018 01    d06   -15.4 -22.3     6\n 7  2018 01    d07    -1   -17.5     7\n 8  2018 01    d08     3    -1.7     8\n 9  2018 01    d09     1.6  -0.6     9\n10  2018 01    d10     5.9  -1.3    10\n# i 345 more rows\n```\n:::\n:::\n\n\n\n## Final step(s)\n- Make year-month-day into proper date.\n- Keep only date, tmax, tmin:\n\\small\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather %>%\n  pivot_longer(d01:d31, names_to=\"day\", \n               values_to=\"temperature\", values_drop_na = T) %>% \n  pivot_wider(names_from=element, values_from=temperature) %>% \n  mutate(Day = parse_number(day)) %>%\n  select(-station) %>% \n  unite(datestr, c(Year, Month, Day), sep = \"-\") %>%\n  mutate(date = as.Date(datestr)) %>%\n  select(c(date, tmax, tmin)) -> weather_tidy\n```\n:::\n\n\n\\normalsize\n\n## Our tidy data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 355 x 3\n   date        tmax  tmin\n   <date>     <dbl> <dbl>\n 1 2018-01-01  -7.9 -18.6\n 2 2018-01-02  -7.1 -12.5\n 3 2018-01-03  -5.3 -11.2\n 4 2018-01-04  -7.7 -19.7\n 5 2018-01-05 -14.7 -20.6\n 6 2018-01-06 -15.4 -22.3\n 7 2018-01-07  -1   -17.5\n 8 2018-01-08   3    -1.7\n 9 2018-01-09   1.6  -0.6\n10 2018-01-10   5.9  -1.3\n# i 345 more rows\n```\n:::\n:::\n\n\n\n## Plotting the temperatures\n- Plot temperature against date joined by lines, but with separate lines\nfor max and min. `ggplot` requires something like\n\n\\footnotesize\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(..., aes(x = date, y = temperature)) + geom_point() + \n  geom_line()\n```\n:::\n\n\n\\normalsize\n\nonly we have two temperatures, one a max and one a min, that we\nwant to keep separate.\n\n- The trick: combine `tmax` and `tmin` together into one column, keeping\ntrack of what kind of temp they are. (This actually same format as\nuntidy `weather`.) Are making `weather_tidy`\nuntidy for purposes of drawing graph only.\n- Then can do something like\n\n\\footnotesize\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(d, aes(x = date, y = temperature, colour = maxmin)) \n  + geom_point() + geom_line()\n```\n:::\n\n\n\\normalsize\nto distinguish max and min on graph.\n\n## Setting up plot\n- Since we only need data frame for plot, we can do the\ncolumn-creation and plot in a pipeline.\n- For a `ggplot` in a pipeline, the initial data frame is omitted, because it\nis whatever came out of the previous step.\n- To make those “one column”s: `pivot_longer`. I save the graph to show overleaf:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_tidy %>%\n  pivot_longer(tmax:tmin, names_to=\"maxmin\", \n               values_to=\"temperature\") %>%\n  ggplot(aes(x = date, y = temperature, colour = maxmin)) +\n      geom_line() -> g\n```\n:::\n\n\n\n## The plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng\n```\n\n::: {.cell-output-display}\n![](tidying_R_files/figure-beamer/temp-plot-1.pdf)\n:::\n:::\n\n\n\n## Summary of tidying “verbs”\n\n  \\begin{tabular}{lp{0.65\\textwidth}}\n    Verb & Purpose\\\\\n    \\hline\n    \\texttt{pivot\\_longer} & Combine columns that measure same thing into one\\\\\n    \\texttt{pivot\\_wider} & Take column that measures one thing under\n                     different conditions and put into multiple columns\\\\\n    \\texttt{separate} & Turn a column that encodes\n                        several variables into\n                        several columns\\\\\n    \\texttt{unite} & Combine several (related) variables into one\n                     ``combination'' variable\\\\\n    \\hline\n  \\end{tabular}\n  \n  `pivot_longer` and `pivot_wider` are opposites; `separate` and\n  `unite` are opposites.\n  \n\n\n",
    "supporting": [
      "tidying_R_files/figure-beamer"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}